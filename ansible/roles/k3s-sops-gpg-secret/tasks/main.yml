# brew install gpg
# export GPG_TTY=$(tty)
# gpg --full-generate-key (rsa/rsa 4096)
# sops --encrypt --pgp "D9B513707705B08EAB4D4071A663ED74C5A7646E" --encrypted-regex '^(data)$' cloudflare-secret.yaml > cloudflare-secret-enc.yaml
# sops --decrypt cloudflare-secret.enc.yaml
# gpg --export-secret-keys --armor caleb@sargeant.co | base64
# gpg --list-keys
# gpg --list-secret-keys

# IT WORKS WITH AGE:
# We had to create a global kustomization patch in clusters/firefly/kustomization.yaml to enable sops decryption for all resources with the label app.kubernetes.io/sops=enabled
# We labeled the apps in clusters/firefly/flux-system/apps.yaml with app.kubernetes.io/sops=enabled
# Create the age key with age-keygen and copy to /Users/calebsargeant/age.agekey
# age-keygen
# Set environment variable for the age key file (can be put in zshrc or bashrc)
# export SOPS_AGE_KEY_FILE=/Users/calebsargeant/age.agekey
# Encrypt the secret with sops and the age key
# sops --encrypt --age age1yj3wdeleng98w9rv46yh40ettc78r9k4r4wgnx7ja5zxmyt8qe7snjg0a0 --encrypted-regex '^(data|stringData)$' -i cloudflare-secret-enc.yaml
# Decrypt the secret with sops
# sops -d cloudflare-secret-enc.yaml
# The key called "sops-keys" is created in the flux-system namespace with the age key as the value (see playbook below)
# encoding the cloudflare key (the secret we want to protect):
# echo  "apikey" | base64
# decoding the key:
# echo "base64encodedApiKey" | base64 -d
# cloudflare secret file (cloudflare-secret-enc.yaml):
#apiVersion: v1
#kind: Secret
#metadata:
#  name: cloudflare-api-token-secret
#  namespace: cert-manager
#type: Opaque
#data:
#  dns-cloudflare-api-token: <BASE64_ENCODED_API_TOKEN>
# The secret is applied to the cluster via fluxcd. You can reconcile flux by running the pi-k3s-fluxcd-reconcile playbook.
# I'm not sure if .sops.yaml is needed inside of the cert-manager directory. I think it is not needed:
# creation_rules:
#  - encrypted_regex: '^(data)$'
#    age: "age1yj3wdeleng98w9rv46yh40ettc78r9k4r4wgnx7ja5zxmyt8qe7snjg0a0"


#- name: Apply Kubernetes Secret
#  command: kubectl apply -f templates/sops-gpg-secret.yaml
#  delegate_to: localhost
#  become: false

#- name: Create a Deployment by reading the definition from a local file
#  kubernetes.core.k8s:
#    state: present
#    src: templates/sops-gpg-secret.yaml

#- name: Create SOPS GPG secret
#  hosts: localhost
#  tasks:
#- name: Grab the GPG key
#  command: cat {{ gpg_key_path }}/pgp.asc
#  register: gpg_key
#  changed_when: false
#  become: false
#  delegate_to: localhost

#- name: Copy GPG key to server
#  copy:
#    content: "{{ gpg_key.stdout }}"
#    dest: /tmp/pgp.asc

#- name: Base64 encode GPG key
#  shell: base64 -w 0 -i {{ gpg_key_path }}/pgp.asc
#  register: base64_key
#  changed_when: false
#  become: false
#  delegate_to: localhost

- name: Base64 encode age key
  shell: base64 -w 0 -i {{ gpg_key_path }}/age.agekey
  register: base64_key
  changed_when: false
  become: false
  delegate_to: localhost

- name: Create Kubernetes Secret manifest
  copy:
    dest: /tmp/sops-age-secret.yaml
    content: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: sops-keys
        namespace: flux-system
      type: Opaque
      data:
        identity.agekey: "{{ base64_key.stdout }}"

- name: Apply Kubernetes Secret
  command: kubectl apply -f /tmp/sops-age-secret.yaml